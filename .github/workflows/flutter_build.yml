name: Build APK Simple

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.32.1'
        cache: true
        
    - name: Fix MainActivity package
      run: |
        echo "🔧 Corrigiendo package en MainActivity..."
        mkdir -p android/app/src/main/kotlin/com/example/t3r_c0d3
        cat > android/app/src/main/kotlin/com/example/t3r_c0d3/MainActivity.kt << 'EOF'
        package com.example.t3r_c0d3

        import io.flutter.embedding.android.FlutterActivity

        class MainActivity: FlutterActivity() {
        }
        EOF
        
    - name: Configure environment
      run: |
        flutter config --no-analytics
        flutter clean
        flutter pub get
        
    - name: Build APK with Gradle fix
      run: |
        # Forzar build ignorando warnings de Gradle
        flutter build apk \
          --release \
          --target-platform android-arm64 \
          --verbose || echo "Build failed, trying alternative..."
          
        # Si falla, intentar con flags adicionales  
        if [ ! -f "build/app/outputs/flutter-apk/app-release.apk" ] && [ ! -f "build/app/outputs/apk/release/app-release.apk" ]; then
          echo "Intentando build con configuración alternativa..."
          cd android
          ./gradlew assembleRelease --warning-mode=none --no-daemon || echo "Gradle failed"
          cd ..
        fi
        
    - name: Package APK
      run: |
        mkdir -p output
        
        # Buscar APK en cualquier ubicación
        APK_FILE=""
        
        if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
          APK_FILE="build/app/outputs/flutter-apk/app-release.apk"
        elif [ -f "build/app/outputs/apk/release/app-release.apk" ]; then
          APK_FILE="build/app/outputs/apk/release/app-release.apk"
        else
          # Buscar cualquier APK
          APK_FILE=$(find build android -name "*.apk" -type f | grep -E "(release|arm64)" | head -1)
        fi
        
        if [ -n "$APK_FILE" ] && [ -f "$APK_FILE" ]; then
          echo "✅ APK encontrado: $APK_FILE"
          cp "$APK_FILE" output/t3r-c0d3-arm64.apk
          cd output
          zip t3r-c0d3-arm64.zip t3r-c0d3-arm64.apk
          echo "📦 APK empaquetado: $(ls -lah t3r-c0d3-arm64.zip)"
        else
          echo "❌ No se encontró APK válido"
          echo "🔍 Archivos encontrados:"
          find . -name "*.apk" -type f
          exit 1
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: t3r-c0d3-arm64
        path: output/t3r-c0d3-arm64.zip
        if-no-files-found: error