name: 🚀 T3R-C0D3 Build & Release Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Tipo de compilación'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug
        - profile

env:
  FLUTTER_VERSION: '3.29.3'
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # 🔍 Análisis de código y validaciones
  code-analysis:
    name: 📊 Análisis de Código
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ⚡ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: 📦 Restaurar cache de dependencias
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: 🔧 Instalar dependencias
      run: flutter pub get

    - name: 🧪 Verificar formato de código
      run: dart format --output=none --set-exit-if-changed .

    - name: 🔍 Análisis estático
      run: flutter analyze --fatal-infos

    - name: 🧪 Ejecutar tests
      run: flutter test --coverage

    - name: 📊 Subir cobertura a Codecov
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        fail_ci_if_error: false

  # 🔨 Compilación de APKs
  build-apk:
    name: 🏗️ Compilar APK
    runs-on: ubuntu-latest
    needs: code-analysis
    strategy:
      matrix:
        target: [android-arm, android-arm64, android-x64]
        build_mode: [release]
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}

    - name: ⚡ Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true

    - name: 📦 Restaurar cache de dependencias
      uses: actions/cache@v4
      with:
        path: |
          ~/.pub-cache
          .dart_tool
        key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-

    - name: 🔧 Instalar dependencias
      run: flutter pub get

    - name: 🏗️ Generar assets y código
      run: |
        flutter packages pub run build_runner build --delete-conflicting-outputs || echo "No build_runner configured"
        flutter gen-l10n || echo "No localization configured"

    - name: 📱 Compilar APK (${{ matrix.target }})
      run: |
        flutter build apk \
          --${{ matrix.build_mode }} \
          --target-platform ${{ matrix.target }} \
          --split-per-abi \
          --dart-define=FLUTTER_WEB_AUTO_DETECT=true

    - name: 📋 Información del APK
      run: |
        echo "📱 APK generado para: ${{ matrix.target }}"
        echo "🔧 Modo: ${{ matrix.build_mode }}"
        echo "📊 Tamaño del APK:"
        ls -lah build/app/outputs/flutter-apk/
        
        # Obtener información detallada del APK
        if command -v aapt &> /dev/null; then
          echo "📋 Información del APK:"
          aapt dump badging build/app/outputs/flutter-apk/app-${{ matrix.target }}-${{ matrix.build_mode }}.apk | head -10
        fi

    - name: 📦 Preparar artefactos
      run: |
        mkdir -p artifacts/${{ matrix.target }}
        
        # Determinar nombre del archivo APK generado
        if [ -f "build/app/outputs/flutter-apk/app-${{ matrix.target }}-${{ matrix.build_mode }}.apk" ]; then
          APK_FILE="app-${{ matrix.target }}-${{ matrix.build_mode }}.apk"
        elif [ -f "build/app/outputs/flutter-apk/app-${{ matrix.build_mode }}.apk" ]; then
          APK_FILE="app-${{ matrix.build_mode }}.apk"
        else
          echo "❌ No se encontró el APK generado"
          ls -la build/app/outputs/flutter-apk/
          exit 1
        fi
        
        echo "📱 APK encontrado: $APK_FILE"
        
        # Copiar APK con nombre descriptivo
        cp "build/app/outputs/flutter-apk/$APK_FILE" "artifacts/${{ matrix.target }}/t3r-c0d3-${{ matrix.target }}-${{ matrix.build_mode }}.apk"
        
        # Generar archivo de información
        cat > "artifacts/${{ matrix.target }}/build-info.txt" << EOF
        🚀 T3R-C0D3 Build Information
        ============================
        📅 Fecha: $(date)
        🏷️  Commit: ${{ github.sha }}
        🌿 Branch: ${{ github.ref_name }}
        🎯 Target: ${{ matrix.target }}
        🔧 Modo: ${{ matrix.build_mode }}
        📱 Flutter: ${{ env.FLUTTER_VERSION }}
        ☕ Java: ${{ env.JAVA_VERSION }}
        🤖 Runner: ${{ runner.os }}
        👤 Actor: ${{ github.actor }}
        
        📊 Tamaño del APK:
        $(ls -lah artifacts/${{ matrix.target }}/t3r-c0d3-${{ matrix.target }}-${{ matrix.build_mode }}.apk)
        EOF

    - name: 📤 Subir APK como artefacto
      uses: actions/upload-artifact@v4
      with:
        name: t3r-c0d3-${{ matrix.target }}-${{ matrix.build_mode }}
        path: artifacts/${{ matrix.target }}/
        retention-days: 30
        compression-level: 6

  # 📦 Crear release unificado
  create-release:
    name: 📦 Crear Release Unificado
    runs-on: ubuntu-latest
    needs: build-apk
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: 📥 Checkout código
      uses: actions/checkout@v4

    - name: 📥 Descargar todos los artefactos
      uses: actions/download-artifact@v4
      with:
        path: ./downloads

    - name: 📦 Crear paquete unificado
      run: |
        mkdir -p release-package
        
        # Crear estructura de directorios
        mkdir -p release-package/{arm32,arm64,x64,docs}
        
        # Organizar APKs por arquitectura
        find downloads -name "*.apk" -type f | while read apk; do
          if [[ "$apk" == *"android-arm64"* ]]; then
            cp "$apk" release-package/arm64/
          elif [[ "$apk" == *"android-arm-"* ]]; then
            cp "$apk" release-package/arm32/
          elif [[ "$apk" == *"android-x64"* ]]; then
            cp "$apk" release-package/x64/
          fi
        done
        
        # Copiar información de build
        find downloads -name "build-info.txt" -exec cp {} release-package/docs/ \;
        
        # Crear README del release
        cat > release-package/README.md << 'EOF'
        # 🚀 T3R-C0D3 Release Package
        
        ## 📱 APKs Incluidos
        
        ### 🔥 arm64 (Recomendado - Dispositivos modernos)
        - Compatibilidad: Android 7.0+ (API 24+)
        - Arquitectura: 64-bit ARM
        - Dispositivos: Samsung Galaxy S8+, Google Pixel 2+, OnePlus 5+, etc.
        
        ### 🔧 arm32 (Compatibilidad legacy)
        - Compatibilidad: Android 5.0+ (API 21+) 
        - Arquitectura: 32-bit ARM
        - Dispositivos: Dispositivos antiguos y gama baja
        
        ### 💻 x64 (Emuladores y tablets x86)
        - Compatibilidad: Emuladores Android Studio
        - Arquitectura: 64-bit x86
        - Dispositivos: Algunos tablets Intel
        
        ## 📥 Instalación
        
        1. Habilita "Fuentes desconocidas" en tu dispositivo
        2. Descarga el APK correspondiente a tu arquitectura
        3. Instala el APK
        4. ¡Disfruta T3R-C0D3!
        
        ## 🔍 ¿Qué arquitectura tengo?
        
        Usa apps como "CPU-Z" o "Device Info" para verificar tu arquitectura.
        
        **Regla general:**
        - Dispositivos 2017+ → arm64
        - Dispositivos 2013-2017 → arm32  
        - Emuladores → x64
        
        ## 📞 Soporte
        
        - 📱 Telegram: @rk13termux
        - 🐙 GitHub: https://github.com/Rk13termux
        - 📺 YouTube: @rk13termux
        
        ---
        
        📅 Generado: $(date)
        🏷️ Commit: ${{ github.sha }}
        🌿 Branch: ${{ github.ref_name }}
        EOF
        
        # Crear changelog automático
        cat > release-package/CHANGELOG.md << 'EOF'
        # 📝 Changelog
        
        ## Cambios en esta versión
        
        ### ✨ Nuevas características
        - Sistema de anuncios AdMob integrado
        - Interfaz mejorada con animaciones nativas
        - Soporte para múltiples arquitecturas
        - Mejor gestión de repositorios
        
        ### 🔧 Mejoras técnicas
        - Optimización de rendimiento
        - Reducción del tamaño del APK
        - Mejor manejo de errores
        - Código más limpio y mantenible
        
        ### 🐛 Correcciones
        - Solucionados crashes en dispositivos antiguos
        - Mejorada compatibilidad con Android 14
        - Corregidos problemas de navegación
        
        ---
        
        Para ver el historial completo: https://github.com/Rk13termux/T3R-C0D3/releases
        EOF

    - name: 🗜️ Crear ZIP unificado
      run: |
        cd release-package
        zip -r "../t3r-c0d3-complete-release-${{ github.ref_name || 'latest' }}.zip" .
        cd ..
        
        echo "📦 Contenido del ZIP:"
        unzip -l "t3r-c0d3-complete-release-${{ github.ref_name || 'latest' }}.zip"
        
        echo "📊 Tamaño del paquete:"
        ls -lah t3r-c0d3-complete-release-*.zip

    - name: 📤 Subir paquete completo
      uses: actions/upload-artifact@v4
      with:
        name: t3r-c0d3-complete-release
        path: t3r-c0d3-complete-release-*.zip
        retention-days: 90

    - name: 🚀 Crear GitHub Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          t3r-c0d3-complete-release-*.zip
          release-package/README.md
          release-package/CHANGELOG.md
        name: "🚀 T3R-C0D3 ${{ github.ref_name }}"
        body: |
          # 🚀 T3R-C0D3 Release ${{ github.ref_name }}
          
          ## 📱 Descarga Rápida
          
          **¿No sabes qué APK descargar?** 
          
          👉 **Descarga el ZIP completo** que incluye todas las arquitecturas + documentación
          
          ## 🎯 APKs por Arquitectura
          
          - **arm64**: Dispositivos modernos (2017+) - **RECOMENDADO**
          - **arm32**: Dispositivos antiguos (2013-2017)
          - **x64**: Emuladores y tablets Intel
          
          ## 🔥 Novedades en esta versión
          
          - ✨ Sistema de anuncios AdMob
          - 🎨 Interfaz renovada con animaciones
          - 🚀 Mejor rendimiento y estabilidad
          - 📱 Soporte mejorado para Android 14
          
          ## 📞 Soporte
          
          - 📱 Telegram: [@rk13termux](https://t.me/rk13termux)
          - 🐙 GitHub: [Issues](https://github.com/Rk13termux/T3R-C0D3/issues)
          
          ---
          
          📅 **Generado automáticamente** el $(date)
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
        token: ${{ secrets.GITHUB_TOKEN }}

  # 🧹 Limpieza y notificaciones
  cleanup:
    name: 🧹 Limpieza y Notificaciones
    runs-on: ubuntu-latest
    needs: [build-apk, create-release]
    if: always()
    
    steps:
    - name: 📊 Resumen del build
      run: |
        echo "## 📊 Resumen del Build" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- 🏷️ **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- 🌿 **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- 👤 **Actor**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- 📅 **Fecha**: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- ⚡ **Flutter**: ${{ env.FLUTTER_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- ☕ **Java**: ${{ env.JAVA_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🎯 Artefactos Generados" >> $GITHUB_STEP_SUMMARY
        echo "- 📱 APK arm64 (recomendado)" >> $GITHUB_STEP_SUMMARY
        echo "- 📱 APK arm32 (legacy)" >> $GITHUB_STEP_SUMMARY  
        echo "- 📱 APK x64 (emuladores)" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 ZIP completo con documentación" >> $GITHUB_STEP_SUMMARY

    - name: ✅ Notificación de éxito
      if: success()
      run: |
        echo "🎉 ¡Build completado exitosamente!"
        echo "📦 Los artefactos están disponibles en la pestaña 'Actions'"
        
    - name: ❌ Notificación de fallo
      if: failure()
      run: |
        echo "💥 El build falló. Revisa los logs para más detalles."
        echo "🔍 Verifica errores de compilación o dependencias faltantes."